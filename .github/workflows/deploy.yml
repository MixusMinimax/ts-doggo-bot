# This is a basic workflow to help you get started with Actions

name: deploy

env:
  IMAGE_NAME: ts-doggo-bot

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
    tags:
      - v*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    runs-on: ubuntu-latest
    environment: ts-doggo-bot
    permissions:
      contents: read

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 15.12
      
      - run: npm install

      - name: Run Tests
        run: npm test
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}

  push:
    needs: test
    runs-on: ubuntu-latest
    environment: ts-doggo-bot
    permissions:
      packages: write
      contents: read

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  
  deploy:
    needs: push
    runs-on: ubuntu-latest
    environment: ts-doggo-bot
    permissions:
      packages: read
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy to Digital Ocean using ssh
        uses: appleboy/ssh-action@master
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
          IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          OWNER_TAG: ${{ secrets.OWNER_TAG }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: |
            IMAGE_NAME,
            DISCORD_TOKEN,
            IMGUR_CLIENT_ID,
            IMGUR_CLIENT_SECRET,
            MONGO_URL,
            OWNER_TAG
          script: |
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

            # Change all uppercase to lowercase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            # Strip "v" prefix from tag name
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
            # Use Docker `latest` tag convention
            [ "$VERSION" == "master" ] && VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION

            if [ "$(docker ps -q -f name=$IMAGE_NAME)" ]; then
              docker rm -f $IMAGE_NAME
            fi

            docker pull $IMAGE_ID:$VERSION
            docker run -d \
            --restart always \
            --name $IMAGE_NAME \
            --env DISCORD_TOKEN=${DISCORD_TOKEN} \
            --env IMGUR_CLIENT_ID=${IMGUR_CLIENT_ID} \
            --env IMGUR_CLIENT_SECRET=${IMGUR_CLIENT_SECRET} \
            --env MONGO_URL=${MONGO_URL} \
            --env OWNER_TAG=${OWNER_TAG} \
            $IMAGE_ID:$VERSION